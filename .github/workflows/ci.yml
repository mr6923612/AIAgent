name: AI Agent CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_backend_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: crewaiFrontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd crewaiBackend
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd crewaiFrontend
        npm ci
    
    - name: Set up environment variables
      run: |
        cd crewaiBackend
        cp env.template .env
        # 设置测试环境变量
        echo "MYSQL_DATABASE=test_backend_db" >> .env
        echo "MYSQL_HOST=127.0.0.1" >> .env
        echo "MYSQL_PORT=3306" >> .env
        echo "MYSQL_USER=root" >> .env
        echo "MYSQL_PASSWORD=root" >> .env
        echo "GOOGLE_API_KEY=test_key" >> .env
        echo "RAGFLOW_BASE_URL=http://localhost:9380" >> .env
        echo "RAGFLOW_API_KEY=test_key" >> .env
        echo "RAGFLOW_CHAT_ID=test_chat_id" >> .env
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"
    
    - name: Run unit tests
      run: |
        cd crewaiBackend
        python -m pytest tests/unit/ -v --tb=short
    
    - name: Run integration tests
      run: |
        cd crewaiBackend
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Run API tests
      run: |
        cd crewaiBackend
        python -m pytest tests/api/ -v --tb=short
    
    - name: Run database tests
      run: |
        cd crewaiBackend
        python -m pytest tests/database/ -v --tb=short
    
    - name: Run external service tests
      run: |
        cd crewaiBackend
        python -m pytest tests/external/ -v --tb=short
    
    - name: Run all tests with coverage
      run: |
        cd crewaiBackend
        python -m pytest tests/ -v --cov=crewaiBackend --cov-report=xml --cov-report=html --cov-fail-under=70
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./crewaiBackend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          crewaiBackend/htmlcov/
          crewaiBackend/reports/

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./crewaiBackend
        push: false
        tags: aiagent-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./crewaiFrontend
        push: false
        tags: aiagent-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker containers
      run: |
        docker run --rm aiagent-backend:latest python -c "import main; print('Backend container works')"
        docker run --rm aiagent-frontend:latest npm --version
    
    - name: Upload Docker images
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: |
          aiagent-backend:latest
          aiagent-frontend:latest

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
    
    - name: Run safety check
      run: |
        cd crewaiBackend
        safety check -r requirements.txt --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        cd crewaiBackend
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run semgrep security scan
      run: |
        cd crewaiBackend
        semgrep --config=auto --json --output=semgrep-report.json . || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          crewaiBackend/safety-report.json
          crewaiBackend/bandit-report.json
          crewaiBackend/semgrep-report.json

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: crewaiFrontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd crewaiBackend
        pip install -r requirements.txt
        pip install black flake8 isort mypy
    
    - name: Install Node.js dependencies
      run: |
        cd crewaiFrontend
        npm ci
    
    - name: Run Python linting
      run: |
        cd crewaiBackend
        black --check . --line-length=120
        flake8 . --max-line-length=120 --ignore=E501,W503
        isort --check-only .
        mypy . --ignore-missing-imports
    
    - name: Run JavaScript linting
      run: |
        cd crewaiFrontend
        npm run lint || echo "Linting completed with warnings"

  deploy:
    needs: [test, build, security, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          aiagent-backend:latest
          aiagent-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker containers locally
      run: |
        echo "Testing Docker containers locally..."
        
        # 启动服务
        docker-compose up -d
        
        # 等待服务启动
        echo "Waiting for services to start..."
        sleep 30
        
        # 健康检查
        echo "Running health checks..."
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
          echo "✅ Frontend service is healthy"
        else
          echo "❌ Frontend service health check failed"
          exit 1
        fi
        
        if curl -f http://localhost:8012/health > /dev/null 2>&1; then
          echo "✅ Backend service is healthy"
        else
          echo "❌ Backend service health check failed"
          exit 1
        fi
        
        # 停止服务
        docker-compose down
    
    - name: Deploy notification
      run: |
        echo "🎉 Local Docker deployment test completed successfully!"
        echo "To deploy locally, run: make quick-start"
        echo "Frontend: http://localhost:3000"
        echo "Backend: http://localhost:8012"
